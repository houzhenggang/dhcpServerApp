# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

#Persona folder
OBJs_TEST_DIR=../obj
BIN_TEST_DIR=../bin
LIBs_TEST_DIR=../lib
SOURCE_CODE=../../src
INC_CODE=../../inc
SOURCE_TEST=../src

#OBJs_TEST+=$(OBJs_TEST_DIR)/all-test.o
OBJs_TEST+=$(OBJs_TEST_DIR)/dhcp_serverTest.o

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../googletest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS += $(BIN_TEST_DIR)/unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : .folder $(TESTS)

clean :
	@rm -f $(TESTS) gtest.a ../lib/gtest_main.a ../obj/*.o
	@rm -rf $(GTEST_FOLDER)/CMakeCache.txt
	@rm -rf $(GTEST_FOLDER)/CMakeFiles/
	@rm -rf $(GTEST_FOLDER)/Makefile
	@rm -rf $(GTEST_FOLDER)/cmake_install.cmake
	@rm -rf ../bin ../obj ../lib
	@echo "Clean tests is done ... "

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
../obj/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) -MD -MF $(patsubst %.o,%.d,$@) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o ../obj/gtest-all.o

../obj/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) -MD -MF $(patsubst %.o,%.d,$@) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o ../obj/gtest_main.o

../lib/gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

../lib/gtest_main.a : ../obj/gtest-all.o ../obj/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(BIN_TEST_DIR)/unittest : $(OBJs_TEST) ../lib/gtest_main.a
	$(CXX) -MD -MF $(patsubst %.o,%.d,$@) -I../../inc ../../obj/*.o $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lgcov -coverage
	ln -s ../test/bin/unittest  ../../bin/unittest 

$(OBJs_TEST_DIR)/%.o:$(SOURCE_TEST)/%.cc 
	$(CXX) -MD -MF $(patsubst %.o,%.d,$@) -I../../inc -c $(CPPFLAGS) $(CXXFLAGS) -o $@  $< 
.folder:
	@mkdir -p ../lib
	@mkdir -p ../obj
	@mkdir -p ../bin
